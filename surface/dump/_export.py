""" Export out data as stub files """

import os
import collections

STUB_HEADER = "# Automatically generated stub file. Generated by 'surface' (pip install surface)\n"

def export_stubs(name_map, directory):
    # type: (Dict[str, BaseNode], str) -> None 
    """ Build a stubfile structure from the provided information """
    # Separate modules from internals
    structure = collections.defaultdict(dict)
    for name, node in name_map.items():
        path, qualname = name.split(":", 1)
        structure[path][qualname] = node
        
    # Build skeleton files, to later fill with content
    files = build_files(structure, directory)

    for path, contents in structure.items():
        print(">", path, files[path])

    # TODO: recurse through the directory, breaking things up.
    # TODO: get each piece to build itself.
    # TODO: break up files and qualnames
    # TODO: build out the file structure


def build_files(paths, directory):
    # type: (Collection[str], str) -> Dict[str, str]
    """ Build files out. Empty at this stage. Ready to be filled with stub content """
    structures = {}
    for path in sorted(paths, reverse=True):
        if path in structures:
            continue
        
        sections = path.split(".")
        for i in range(1, len(sections)):
            subsection = sections[:i]
            key = ".".join(subsection)
            if key in structures:
                continue
            package = os.path.join(directory, *subsection)
            init = os.path.join(package, "__init__.pyi")
            if not os.path.isfile(init):
                os.mkdir(package)
                with open(init, "w") as fh:
                    fh.write(STUB_HEADER)
            structures[key] = init
        module = os.path.join(directory, *sections) + ".pyi"
        if not os.path.isfile(module):
            with open(module, "w") as fh:
                fh.write(STUB_HEADER)
        structures[path] = module
    return structures