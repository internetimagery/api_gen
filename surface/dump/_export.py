""" Export out data as stub files """

import os

STUB_HEADER = "# Automatically generated stub file. Generated by 'surface' (pip install surface)\n\n"

def export_stubs(representation, directory):
    # type: (Dict[str, Dict[str, BaseWrapper]], str) -> None 
    """ Build a stubfile structure from the provided information """
    # Build skeleton files, to later fill with content
    files = build_skeleton_files(representation, directory)

    # Fill in the content of a file
    for path, contents in representation.items():
        with open(files[path], "a") as fh:
            fh.write(build_content(contents))


def build_content(contents):
    # type: (Dict[str, BaseWrapper]) -> str
    """ Generate the content within the stub file """
    return "HELLO FROM STUBFILE"

def build_skeleton_files(paths, directory):
    # type: (Collection[str], str) -> Dict[str, str]
    """ Build files out. Empty at this stage. Ready to be filled with stub content """
    structures = {}
    for path in sorted(paths, reverse=True):
        if path in structures:
            continue
        
        sections = path.split(".")
        for i in range(1, len(sections)):
            subsection = sections[:i]
            key = ".".join(subsection)
            if key in structures:
                continue
            package = os.path.join(directory, *subsection)
            init = os.path.join(package, "__init__.pyi")
            if not os.path.isfile(init):
                os.mkdir(package)
                with open(init, "w") as fh:
                    fh.write(STUB_HEADER)
            structures[key] = init
        module = os.path.join(directory, *sections) + ".pyi"
        if not os.path.isfile(module):
            with open(module, "w") as fh:
                fh.write(STUB_HEADER)
        structures[path] = module
    return structures